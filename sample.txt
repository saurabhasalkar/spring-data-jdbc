@RestController
public class WorkFlowController {

    private final WorkFlowInstanceService workFlowInstanceService;

    public WorkFlowController(WorkFlowInstanceService workFlowInstanceService) {
        this.workFlowInstanceService = workFlowInstanceService;
    }

    @GetMapping("/running-workflows")
    public ResponseEntity<?> getRunningWorkflows(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size,
            @RequestParam(defaultValue = "createdAt") String sortBy,
            @RequestParam(defaultValue = "desc") String order,
            @RequestParam(required = false) String workFlowId,
            @RequestParam(required = false) String businessDate, // yyyy-MM-dd or blank
            @RequestParam(required = false) String initiatedBy
    ) {
        try {
            if (page < 0) page = 0;
            if (size <= 0) size = 20;

            Sort sort = "desc".equalsIgnoreCase(order)
                    ? Sort.by(sortBy).descending()
                    : Sort.by(sortBy).ascending();

            Pageable pageable = PageRequest.of(page, size, sort);

            Page<WorkflowInstanceDto> running =
                    workFlowInstanceService.getRunningWorkflows(pageable, workFlowId, businessDate, initiatedBy);

            return ResponseEntity.ok(RunningWorkflowsResponse.success(running));
        } catch (IllegalArgumentException ex) {
            return ResponseEntity.badRequest().body("Invalid request: " + ex.getMessage());
        } catch (Exception ex) {
            return ResponseEntity.internalServerError()
                    .body("Failed to retrieve running workflows: " + ex.getMessage());
        }
    }
}