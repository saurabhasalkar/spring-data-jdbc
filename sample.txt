public WorkflowInstanceDto getAllTasksWithInstanceDto(String workflowInstanceId) {
        WorkflowExecution execution = workflowExecutionRepository.findByWorkflowInstanceId(workflowInstanceId);
        if (execution == null) {
            return null;
        }
        
        WorkflowDefinition definition = workflowDefinitionRepository.findById(execution.getWorkflowId()).orElse(null);
        List<WorkflowExecutionTask> tasks = workflowExecutionTaskRepository.findByWorkflowInstanceId(execution.getWorkflowInstanceId());
        
        WorkflowInstanceDto dto = mapToDto(execution, tasks, definition);
        Map<String, List<String>> currentTaskPrerequisiteMap = new HashMap<>();

        tasks.forEach(task -> {
            List<String> prereqs = workflowTaskDependenciesRepository.findPrerequisiteTasks(execution.getWorkflowId(), task.getTaskId())
                    .stream()
                    .map(WorkflowTaskDependencies::getPrerequisiteTaskId)
                    .collect(Collectors.toList());
            currentTaskPrerequisiteMap.put(task.getTaskId(), prereqs);
        });

        dto.setCurrentTaskPrerequisiteMap(currentTaskPrerequisiteMap);
        return dto;
    }
